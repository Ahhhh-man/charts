# Copyright 2018 The Knative Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

{{- $activator := .Values.activator }}
{{- if $activator.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: activator
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/component: activator
    {{ include "knative-serving.labels" . | nindent 4 }}
  annotations:
    {{ include "knative-serving.annotations" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      app: activator
      role: activator
  template:
    metadata:
      labels:
        app: activator
        role: activator
        app.kubernetes.io/component: activator
        {{ include "knative-serving.labels" . | nindent 8 }}
    spec:
      {{- with $activator.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 12 }}
      {{- end }}
      {{- with $activator.affinity }}
      affinity:
        {{- toYaml . | nindent 12 }}
      {{- else }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app: activator
                topologyKey: kubernetes.io/hostname
              weight: 100
      {{- end }}
      {{- with $activator.tolerations }}
      tolerations:
        {{- toYaml . | nindent 12 }}
      {{- end }}
      serviceAccountName: {{ $activator.serviceAccount.name }}
      containers:
        - name: activator
          image: {{ template "knative-serving.activator.image" . }}
          imagePullPolicy: {{ $activator.image.pullPolicy }}
          {{- if or $activator.image.pullSecrets .Values.global.imagePullSecrets }}
          imagePullSecrets:
            {{- include "knative-serving.imagePullSecrets" (dict "root" . "imagePullSecrets" $activator.image.pullSecrets) | nindent 8 }}
          {{- end }}
          {{- with $activator.resources }}
          resources:
          {{- toYaml . | nindent 6 }}
          {{- else }}
          resources:
            requests:
              cpu: 300m
              memory: 60Mi
            limits:
              cpu: 1000m
              memory: 600Mi
          {{- end }}
          env:
            # Run Activator with GC collection when newly generated memory is 500%.
            - name: GOGC
              value: "500"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: SYSTEM_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: CONFIG_LOGGING_NAME
              value: config-logging
            - name: CONFIG_OBSERVABILITY_NAME
              value: config-observability
            # TODO(https://github.com/knative/pkg/pull/953): Remove stackdriver specific config
            - name: METRICS_DOMAIN
              value: knative.dev/internal/serving
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          ports:
            - name: metrics
              containerPort: {{ $activator.containerPorts.metrics }}
            - name: profiling
              containerPort: {{ $activator.containerPorts.profiling }}
            - name: http1
              containerPort: {{ $activator.containerPorts.http1 }}
            - name: h2c
              containerPort: {{ $activator.containerPorts.h2c }}
          {{- with $activator.livenessProbe }}
          livenessProbe:
          {{- toYaml . | nindent 6 }}
          {{- else }}
          livenessProbe:
            httpGet:
              port: http1
            periodSeconds: 10
            failureThreshold: 12
            initialDelaySeconds: 15
          {{- end }}
          {{- with $activator.readinessProbe }}
          readinessProbe:
          {{- toYaml . | nindent 6 }}
          {{- else }} 
          readinessProbe:
            httpGet:
              port: http1
            periodSeconds: 5
            failureThreshold: 5
            initialDelaySeconds: 15
          {{- end }}
      # The activator (often) sits on the dataplane, and may proxy long (e.g.
      # streaming, websockets) requests.  We give a long grace period for the
      # activator to "lame duck" and drain outstanding requests before we
      # forcibly terminate the pod (and outstanding connections).  This value
      # should be at least as large as the upper bound on the Revision's
      # timeoutSeconds property to avoid servicing events disrupting
      # connections.
      terminationGracePeriodSeconds: {{ $activator.terminationGracePeriodSeconds }}
---
apiVersion: v1
kind: Service
metadata:
  name: activator-service
  namespace: {{ .Release.Namespace }}
  labels:
    app: activator
    {{ include "knative-serving.labels" . | nindent 4 }}
  annotations:
    {{ include "knative-serving.annotations" . | nindent 4 }}
spec:
  selector:
    app: activator
  ports:
    - name: http-metrics
      port: 9090
      targetPort: {{ $activator.containerPorts.metrics }}
    - name: http-profiling
      port: 8008
      targetPort: {{ $activator.containerPorts.profiling }}
    - name: http
      port: 80
      targetPort: {{ $activator.containerPorts.http1 }}
    - name: http2
      port: 81
      targetPort: {{ $activator.containerPorts.h2c }}
    - name: https
      port: 443
      targetPort: {{ $activator.containerPorts.https }}
  type: ClusterIP
{{- end }}
